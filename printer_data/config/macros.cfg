[gcode_macro _global_var]
variable_z_maximum_lifting_distance: 345
gcode:

[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}

    
[gcode_macro QUAD_GANTRY_LEVEL_MANUAL]
#rename_existing:QUAD_GANTRY_LEVEL_BASE
gcode:
    status_calibrating_zG
    G28
    STATUS_LEVELING
    QUAD_GANTRY_LEVEL
    G28 Z
    STATUS_READY


#[gcode_macro _CLIENT_VARIABLE]
#variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
#variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
#variable_custom_park_y    : 0.0   ; custom y position; value must be within your defined min and max of Y
#variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
#variable_retract          : 1.0   ; the value to retract while PAUSE
#variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
#variable_speed_retract    : 35.0  ; retract speed in mm/s
#variable_unretract        : 1.0   ; the value to unretract while RESUME
#variable_speed_unretract  : 35.0  ; unretract speed in mm/s
#variable_speed_hop        : 15.0  ; z move speed in mm/s
#variable_speed_move       : 100.0 ; move speed in mm/s
#variable_park_at_cancel   : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
#variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
#variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
#variable_idle_timeout     : 600     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
#variable_runout_sensor    : "filament_switch_sensor filament_sensor"    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
#                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
# !!! Custom macros, please use with care and review the section of the corresponding macro.
# These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
# Only  single line commands are supported, please create a macro if you need more than one command.
#variable_user_pause_macro : "_DEMON_PAUSE"    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
#variable_user_resume_macro: "_DEMON_RESUME"    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
#variable_user_cancel_macro: "_DEMON_CANCEL"    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function

gcode:

[gcode_macro START_PRINT]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  #{% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
    STATUS_HOMING         # Sets SB-leds to homing-mode
    
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28                      # Full home (XYZ)
    {% endif %}
                
    G90

    SMART_PARK

    M400

    CLEAR_PAUSE

  ##  Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)
  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}C"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    M106 S255                                           # Turns on the PT-fan

    ##  Uncomment if you have a Nevermore.
    #SET_PIN PIN=nevermore VALUE=1                      # Turns on the nevermore

    M190 S{target_bed}                                  # Sets the target temp for the bed
    #SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}C"  # Displays info
    #TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}C"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
    G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
  {% endif %}

  ##  Uncomment for V2 (Quad gantry level AKA QGL)
  SET_DISPLAY_TEXT MSG="QGL"      # Displays info
  STATUS_LEVELING                 # Sets SB-leds to leveling-mode
  quad_gantry_level               # Levels the buildplate via QGL
  STATUS_HOMING
  G28 Z                           # Homes Z again after QGL

  SMART_PARK

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 200C"          # Displays info
  M109 S200                                    # Heats the nozzle to 200C


  ##  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  
  STATUS_MESHING                     # Sets SB-leds to bed mesh-mode

  #BED_MESH_CALIBRATE ADAPTIVE=1 METHOD=RAPID_SCAN               # Starts bed mesh
  BED_MESH_CALIBRATE METHOD=rapid_scan ADAPTIVE=1 

  STATUS_READY

  SMART_PARK

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}C"             # Displays info
  STATUS_HEATING                                                # Sets SB-leds to heating-mode
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp
  
  STATUS_PRINTING
  
  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info

[gcode_macro END_PRINT]
gcode:
  #Get Boundaries
  {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

  #Check end position to determine safe directions to move

  {% if printer.toolhead.position.z < (max_z - 2) %}
      {% set z_safe = 2.0 %}
    {% else %}
  {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

  #Commence END_PRINT
  M400 ; wait for buffer to clear
  G92 E0 ; zero the extruder
  G1 E-4.0 F3600 ; retract
  G91 ; relative positioning
  G0 Z{z_safe} F3600 ; move nozzle up
  M104 S0 ; turn off hotend
  M140 S0 ; turn off bed
  M106 S0 ; turn off fan
  M107 ; turn off part cooling fan
  G90 ; absolute positioning
  G1 X37 Y350 F9000 ; move nozzle and present
  M84 ; Disable all steppers

[gcode_macro BEEP]
gcode:
  SET_PIN PIN=beeper VALUE=1
  G4 P10  
  SET_PIN PIN=beeper VALUE=0

[gcode_macro _ALL_FAN_OFF]
gcode:
    M106 S0
    M107


[gcode_macro M600]
gcode:
    PAUSE STATE=filament_change

[gcode_macro _KNOMI_STATUS]
variable_homing: False
variable_probing: False
variable_qgling: False
variable_heating_nozzle: False
variable_heating_bed: False
gcode:

[gcode_macro M109]
rename_existing: M109.1
gcode:
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=heating_nozzle VALUE=True
  M109.1 {rawparams}
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=heating_nozzle VALUE=False

[gcode_macro M190]
rename_existing: M190.1
gcode:
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=heating_bed VALUE=True
  M190.1 {rawparams}
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=heating_bed VALUE=False
  
[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
gcode:
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=qgling VALUE=True
    status_leveling
    # If QGL is not applied, first run a course calibration
    {% if printer.quad_gantry_level.applied == False %}
        _QUAD_GANTRY_LEVEL RETRY_TOLERANCE=0.0100
    {% endif %}
    # then perform fine QGL down to desired spec
    # this has to be a separate macro call so the results of the above call will be visible!
    _FINE_QUAD_GANTRY_LEVEL
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=qgling VALUE=False
    status_ready

[gcode_macro _FINE_QUAD_GANTRY_LEVEL]
gcode:
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=qgling VALUE=True
    status_leveling
    {% if printer.quad_gantry_level.applied == True %}
        # go for full quality at reduced probing height
        _QUAD_GANTRY_LEVEL HORIZONTAL_MOVE_Z=5.5  # <- set your preferred probing height here!
    {% else %}
        # This should never happen, just perform the full calibration using the defaults
        {action_respond_info("Fine QGL called without calling course QGL first!")}
        _QUAD_GANTRY_LEVEL  # default behavior, no speedup
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=qgling VALUE=False
    status_ready
    
# [gcode_macro _CLIENT_VARIABLE]
# variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
# variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
# variable_custom_park_y    : 0.0   ; custom y position; value must be within your defined min and max of Y
# variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
# variable_retract          : 1.0   ; the value to retract while PAUSE
# variable_cancel_retract   : 4.0   ; the value to retract while CANCEL_PRINT
# variable_speed_retract    : 35.0  ; retract speed in mm/s
# variable_unretract        : 1.0   ; the value to unretract while RESUME
# #variable_speed_unretract  : 35.0  ; unretract speed in mm/s
# #variable_speed_hop        : 15.0  ; z move speed in mm/s
# variable_speed_move       : 75.0 ; move speed in mm/s
# variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
# variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# ## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
# #variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
# #variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
# variable_runout_sensor    : "filament_switch_sensor filament_sensor"    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
# ##                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
# ## !!! Custom macros, please use with care and review the section of the corresponding macro.
# ## These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
# ## Only  single line commands are supported, please create a macro if you need more than one command.
# variable_user_pause_macro : "STATUS_BUSY"    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
# variable_user_resume_macro: "STATUS_READY"    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
# variable_user_cancel_macro: "M117 Cancel Print"    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
# gcode:

#[gcode_macro M106]
#gcode:
#    {% set fan = 'fan' + (params.P|int if params.P is defined else 0)|string %}
#    {% set speed = (params.S|float / 255 if params.S is defined else 1.0) %}
#    {% if fan == 'fan3'%}
#            SET_FAN_SPEED FAN={fan} SPEED={speed}
#    {% else %}
#        SET_FAN_SPEED FAN={'fan0'} SPEED={speed}
#        SET_FAN_SPEED FAN={'fan1'} SPEED={speed}
#    {% endif %}
    
#[gcode_macro M107]
#gcode:
#    {% set fan = 'fan' + (params.P|int if params.P is defined else 0)|string %}
#    {% if fan == 'fan3'%}
#            SET_FAN_SPEED FAN={fan} SPEED=0
#    {% else %}
#        SET_FAN_SPEED FAN={'fan0'} SPEED=0
#        SET_FAN_SPEED FAN={'fan1'} SPEED=0
#    {% endif %}

[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh -c $0"
timeout: 90.0
verbose: True

[gcode_macro _IDLE_TIMEOUT]
gcode:
    {% if printer.print_stats.state == "paused" %}
      RESPOND TYPE=echo MSG="No operations in 10min!"
    {% else %}
     M84
     TURN_OFF_HEATERS
    {% endif %}

[gcode_macro CLEAN_NOZZLE_old] 
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
       G28
    {% endif %}
    G90 
    G1 X348 Y0 Z0.3 F9000
    M117 Nozzle heating...
    M109 S150
    G91
    G1 Z10 F300
    G90
    M106 S255
    M117 Clean nozzle
    G1 X315 Y360 F9000
    G1 Z0.2 F300
    G1 X352 F4500
    G1 Y360 X324
    G1 Y360 X345
    G1 Y360 X324
    G1 Y360 X345
    G1 Y360 X324
    G1 Y360 X345
    G1 Y360 X324
    G1 Y360 X345
    G1 Y360 X324
    G1 Y360 X325
    G1 Y356 X324 Z5
    G1 Z0.2
    G1 Y360 X324
    G1 Y357 X326
    G1 Y360 X326
    G1 Y357 X328
    G1 Y360 X330
    G1 Y357 X332
    G1 Y360 X334
    G1 Y357 X336
    G1 Y360 X338
    G1 Y357 X340
    G1 Y360 X324
    G1 Y357 X326
    G1 Y360 X326
    G1 Y357 X328
    G1 Y360 X330
    G1 Y357 X332
    G1 Y360 X334
    G1 Y357 X336
    G1 Y360 X338
    G1 Y357 X340
    G1 Y360 X324
    G1 Y357 X326
    G1 Y360 X326
    G1 Y357 X328
    G1 Y360 X330
    G1 Y357 X332
    G1 Y360 X334
    G1 Y357 X336
    G1 Y360 X338
    M400
    M117 Clean Finish
    M109 S150
    M107 
    G91
    G1 Z10 F300
    G90
    G28 Z